(defwidget bar []
    (centerbox :orientation "h"
        (workspaces)
        (music)
        (stuff)
    )
)

(defwidget workspaces []
    (box :class "bar_workspaces" :orientation "h" :space-evenly true :halign "start" :spacing 10
        (button :class {cur_workspace == "1" ? "bar_workspace-button-red" : "bar_workspace-button-green"} 
                :onclick "wmctrl -s 0" 1)
        (button :class {cur_workspace == "2" ? "bar_workspace-button-red" : "bar_workspace-button-green"} 
                :onclick "wmctrl -s 1" 2)
        (button :class {cur_workspace == "3" ? "bar_workspace-button-red" : "bar_workspace-button-green"} 
                :onclick "wmctrl -s 2" 3)
        (button :class {cur_workspace == "4" ? "bar_workspace-button-red" : "bar_workspace-button-green"} 
                :onclick "wmctrl -s 3" 4)
        (button :class {cur_workspace == "5" ? "bar_workspace-button-red" : "bar_workspace-button-green"} 
                :onclick "wmctrl -s 4" 5)
    )
)

(defwidget stuff [] 
    (box :class "bar_stuff" :orientation "h" :space-evenly false :halign "end" :spacing 20
        (box :class "bar_green_box" :orientation "h" :space-evenly false :visible { b_con == "Device" ? true : false }
            {
                "󰂯"
            }
        )
        (box :class "bar_green_box" :orientation "h" :space-evenly false :visible { w_con == "connected" ? true : false }
            {
                ""
            }
        )
        (button :class {muted == "on" ? "bar_green_box" : "bar_red_box"} :orientation "h" :space-evenly false :onclick "pactl set-sink-mute @DEFAULT_SINK@ toggle"
            { 
                "Vol ${volume}"
            }
        )
        (box :class {EWW_BATTERY["BAT0"].capacity > "10" ? "bar_green_box" : "bar_red_box"} :orientation "h" :space-evenly false 
            { 
                (EWW_BATTERY["BAT0"].status != "Discharging" ? "Chr" : "Bat") + " ${EWW_BATTERY["BAT0"].capacity}%"
            }
        )
        (box :class "bar_green_box" :orientation "h" :space-evenly false 
           time 
        )
    )
)

(defwidget music []
    (box :class "bar_green_box" :orientation "h" :space-evenly false :halign "center"
        {
            music != "" ? "${music}" : "silence"
        }
    )
)

(deflisten music :initial "" 
    "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true"
) 

(defpoll time :interval "30s"
    "date '+%H:%M %a, %b %d'"
)

(defpoll volume :interval "1s"
    "awk -F'[][]' '/Left:/ { print $2 }' <(amixer sget Master)"
)

(defpoll b_con :interval "1s"
    "awk 'NR==1{ print $1 }' <(bluetoothctl devices Paired)"
)

(defpoll w_con :interval "1s"
    "awk 'NR==2{ print $1 }' <(nmcli g)"
)

(defpoll muted :interval "1s"
    "awk -F'[][]' '/Left:/ { print $4 }' <(amixer sget Master)"
)

(defpoll cur_workspace :interval "1s"
    "awk '/*/ { print $9 }' <(wmctrl -d)"
)

(defwindow bar 
    :monitor 0
    :windowtype "dock"
    :geometry (geometry :x "0%"
                        :y "0%"
                        :width "90%"
                        :height "30px"
                        :ahcnor "top center"
                )
    :reverse (struts :side "top" :distance "4%")
    (bar)
)
